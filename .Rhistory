print(presidents)
print(numbers_vector)
print(numbers_vector)
print(presidents)
#Numeric
a <- 3
b <- 3.1415
#Character
c <- "This is a string"
d <- "Yet another string"
#Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
#Vector is a basic unit of data structure in R
#All elements in a vector must be of the same type
#c means concatonate
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(numbers_vector)
#Numeric
a <- 3
b <- 3.1415
#Character
c <- "This is a string"
d <- "Yet another string"
#Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
#Vector is a basic unit of data structure in R
#All elements in a vector must be of the same type
#c means concatonate
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
# R is a one-index language
presidents[1]
### Combine vectors into a single vector
combined_vector <- c(disney_characters, presidents)
combined_vector
# A for-loop
for (x in combined_vector) {
print(x)
}
#Operate over an entire vector en masse
numeric_vector <- 1:length(combined_vector)
#Operate over an entire vector en masse
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
print(numeric_vector)
print(squared_vector)
for(prez in presidents) {
if (nchar(prez) > 5) {
next
}
else {
print(prez)
}
}
random_list <- ("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=c("washington", "adams", "jefferson"),
"nums"=c(1, 2, 3, 4, 5),
"bools"=c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE))
random_list <- ("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=c("washington", "adams", "jefferson"),
"nums"=c(1, 2, 3, 4, 5),
"bools"=c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE))
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=c("washington", "adams", "jefferson"),
"nums"=c(1, 2, 3, 4, 5),
"bools"=c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE))
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=c("washington", "adams", "jefferson"),
"nums"=c(1, 2, 3, 4, 5),
"bools"=c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE))
random_list[["movies"]]
random_list[["movies"]][1]
new_function <- function (a, b, c)
{
result <- a*b+c
print(result)
}
new_function(1,2,3)
new.function <- new_function(2, 3, 8)
new.function
new.function <- new_function
new.function(1, 3, 5)
print(name)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(name in students) {
print(name)
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student
# name and locker combination.
}
roll_call
roll_call()
sample(33,3)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student
# name and locker combination.
for (name in students) {
print(name)
sample(33, 3)
}
}
print(locker_combinations)
locker_combinations()
print(sample(33, 3))
locker_combinations()
print(combo)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student
# name and locker combination.
for (name in students) {
print(name)
combo <- sample(33, 3)
print(combo)
}
}
locker_combinations()
# Part III
for (name in students){
# Create a variable (sub string) that
# holds the second letter for each student.
nameletter <- substr(name, 2, 2)
# Create an if statement to find
# the names of students where the
# second letter that is an "e".
if (nameletter == "e") {
print(name)
combo <- sample(33, 3)
print(combo)
}
}
setwd("~/")
library(dplyr)
library(dplyr)
(dplyr)
(dplyr)
(dplyr)
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
# Assign names to a vector
# Assign months to precipitation as names
print(months)
names(precipitation) <- months
print(precipitation)
precipitation["Jan"]
precipitation[["Jan"]]
?summary
summary(precipitation)
precipitation %>% summary()
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
# Display precipitation
print(months)
# Display names of precipitation
print(precipitation)
# Access a single member of precipitation by its name
names(precipitation) <- months
# Summary of data
# Display summary data of precipitation
summary(precipitation)
# Store the results in a vector.
report <- summary(precipitation)
# Access features of a summary
report[[Min]]
# Access features of a summary
report[[Min.]]
> install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
?read.csv()
mechaCar_mpg <- read.csv(MechaCar_mpg.csv, check.names=F, stringsAsFactors = F, )
mechaCar_mpg <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F, )
mechaCar_mpg <- read.csv(file=MechaCar_mpg.csv, check.names=F, stringsAsFactors = F, )
?library()
library(tidyverse)
mechaCar_mpg <- read.csv('file=MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
library(tidyverse)
mechaCar_mpg <- read.csv('file=MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
mechaCar_mpg <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
library(tidyverse)
mechaCar_mpg_df <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
mechaCar_mpg_df <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
# Load library
library(tidyverse)
# Load csv
mechaCar_mpg_df <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
# Perform linear regression
mpg_ln <- ln(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCar_mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_ln)
# Load library
library(tidyverse)
# Load csv
mechaCar_mpg_df <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
# Perform linear regression
mpg_ln <- ln(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCar_mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_ln)
# Load library
library(dplyr)
# Load csv
mechaCar_mpg_df <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
# Perform linear regression
mpg_ln <- ln(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCar_mpg_df)
# Load csv
mechaCar_mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_ln <- ln(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechaCar_mpg_df)
# Load library
library(dplyr)
# Load csv
mechaCar_mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
setwd("C:/Users/LaraK/Desktop/Git_Repositories")
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_ln <- ln(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_ln)
setwd("C:/Users/LaraK/Desktop/Git_Repositories/Modules/Challenges/M15 Challenge")
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_ln <- ln(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_ln)
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
#Load Suspension_Coil.csv
suspension_df<- read.csv(file='Resources/Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
#Load Suspension_Coil.csv
suspension_df <- read.csv(file='Resources/Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
# Create a total summary
total_summary <- suspension_coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups='keep')
# Create a total summary
total_summary <- suspension_df %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups='keep')
#Deliverable 01
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
#Deliverable 02
#Load Suspension_Coil.csv
suspension_df <- read.csv(file='Resources/Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
# Create a total summary
total_summary <- suspension_df %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups='keep')
setwd("C:/Users/LaraK/Desktop/Git_Repositories/Modules/Challenges/M15 Challenge")
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
#Load Suspension_Coil.csv
suspension_df <- read.csv(file='Resources/Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
# Create a total summary
total_summary <- suspension_df %>%
summarize(Mean=mean(PSI), Median=median(PSI),
Variance=var(PSI), SD=sd(PSI), .groups='keep')
# Create a lot summary
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI),
SD=sd(PSI), .groups='keep')
#Perform t-test
t.test(suspension_df$PSI, mu=1500)
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
mpg_df
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
#Load Suspension_Coil.csv
suspension_df <- read.csv(file='Resources/Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
# Create a total summary
total_summary <- suspension_df %>%
summarize(Mean=mean(PSI), Median=median(PSI),
Variance=var(PSI), SD=sd(PSI), .groups='keep')
total_summary
# Create a lot summary
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI),
SD=sd(PSI), .groups='keep')
lot_summary
#Perform t-test
t.test(suspension_df$PSI, mu=1500)
#Lot 01 test
t.test(subset(suspension_df, Manufacturing_Lot="Lot1")$PSI, mu=1500)
#Lot 01 test
lot01_t_test = t.test(subset(suspension_df, Manufacturing_Lot="Lot1")$PSI, mu=1500)
lot01_t_test
#Deliverable 01
# Load library
library(dplyr)
# Load csv
mpg_df <- read.csv(file='Resources/MechaCar_mpg.csv', check.names=F, stringsAsFactors=F)
# Perform linear regression
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_df)
# Determine the p-value & r^2 value for the model
summary(mpg_lm)
#Deliverable 02
#Load Suspension_Coil.csv
suspension_df <- read.csv(file='Resources/Suspension_Coil.csv', check.names=F, stringsAsFactors=F)
# Create a total summary
total_summary <- suspension_df %>%
summarize(Mean=mean(PSI), Median=median(PSI),
Variance=var(PSI), SD=sd(PSI), .groups='keep')
total_summary
# Create a lot summary
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI),
SD=sd(PSI), .groups='keep')
lot_summary
#Deliverable 03
#Perform t.test
t.test(suspension_df$PSI, mu=1500)
#Create three more t.test scripts
#Lot 01 test
t.test(subset(suspension_df, Manufacturing_Lot="Lot1")$PSI, mu=1500)
#Lot 02 test
t.test(subset(suspension_df, Manufacturing_Lot="Lot2")$PSI, mu=1500)
#Lot 03 test
t.test(subset(suspension_df, Manufacturing_Lot="Lot3")$PSI, mu=1500)
